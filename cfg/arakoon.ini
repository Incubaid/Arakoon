[global]
#comma separated list of node names that are part of the cluster
cluster = arakoon_0 , arakoon_1, witness_0
#optional:
#master = arakoon_0
# modifier for master, if preferred, the master is no longer forced
#preferred_master = true
# List of preferred masters. If set, 'master' must not be set,
# and 'preferred_master' is implicit
#preferred_masters = arakoon_0, arakoon_1
#lease_period = 60 
# The number of leaf pages in Tokyo Cabinet's cache
#lcnum = 16384
# The number of internal pages in Tokyo Cabinet's cache
#ncnum = 8192

client_buffer_capacity = 64
#name of the cluster:
cluster_id = ricky

#[nursery]
#cluster = arakoon_0
#cluster_id = ricky

#plugins: these need to be available in the home of EACH node
#plugins = plugin_update_max

# DANGER: only set this if you know what you're doing,
# and understand the risk.
# (in the 2 node case,
#  you might want to be able to continue
#  when 1 node is down,
#  so you lower the quorum to 1 iso the default)
# the downside is that if you do this on both sides of
# a split network you will end up having 2 realities.
#quorum = 1

# only available for clusters of size 1
# readonly = true

# TLS
# Path to CA certificate file
# This will be used to validate certificates provided by other nodes when
# TLS is used.
#
# tls_ca_cert = /path/to/cacert.pem
#
# Use TLS for client service
#
# tls_service = true
#
# Require valid certificates from clients (checked using the CA certificate as
# configured with tls_ca_cert)
#
# tls_service_validate_peer = false
#
# Use a specific TLS version (for backwards compatibility, 1.0 is the default).
# Valid values are '1.0', '1.1' and '1.2'.
#
# tls_version = 1.0
#
# Select a specific set of enabled ciphers
# See `man 1 ciphers` and `man 3 SSL_set_cipher_list` for documentation for
# this value, as well as how unknown settings etc. are handled.
# The default is to set no specific cipher list, i.e. rely on the default
# provided by the SSL library on the system.
#
# tls_cipher_list =

[default_log_config]
# available levels are: debug info notice warning error fatal
client_protocol = debug
paxos = debug
tcp_messaging = debug


#[default_batched_transaction_config]
#max_entries = 100    # number of sets and deletes
#max_size    = 100000 # in bytes


[arakoon_0]
#comma separated list of all ip addresses used to identify that node
ip = 127.0.0.1
client_port = 4000
messaging_port = 4010
home = /tmp/arakoon/arakoon_0
#optional different directory for .tlog, .tlc and friends
#tlog_dir = /tmp/arakoon/arakoon_0
#log_dir = /tmp/arakoon/arakoon_0
#compressor = bz2 # default is bz2; valid choices are: none snappy bz2

fsync=true

# available levels are: debug info notice warning error fatal
log_level = debug
log_config = default_log_config
#batched_transaction_config = default_batched_transaction_config

# Throttle transaction processing during collapsing
# On some hardware and in some deployments, the collapsing process can be a
# very IO and CPU-hungry process. This can have a negative impact on the
# overall responsiveness of an Arakoon node.
# This setting allows some control over throttling database transaction rates
# during compaction.
# When this setting is configured, the collapsing thread yields execution
# (sleeps) for some time after every database transaction it processed. The
# sleep time is calculated by multiplying the time the previous transaction
# took to process with the configured number.
# As an example, when this is set to 1.0, the collapsing process will take
# at least twice as long to complete compared to no throttling being enabled.
#collapse_slowdown = 1.5

# for debugging
#laggy = true
# report every x seconds (default = 300)
#reporting = 10

# TLS
# SSL/TLS certificate & key to be used by the node
# Note all nodes in a cluster should be configured to use TLS, mixing is
# not supported.
# The certificate should be signed by the CA whose certificate is provided
# by the "tls_ca_cert" setting in the "global" section.
#
# tls_cert = /path/to/arakoon0.pem
# tls_key = /path/to/arakoon0.key

# slow down copying of head.db:
# for a factor f, the scheme is:
#     do_a step; // takes x
#     wait (f * x)
#     loop
#head_copy_throttling = 1.0 # default = 0

[arakoon_1]
ip = 127.0.0.1
client_port = 4001
messaging_port = 4011
home = /tmp/arakoon/arakoon_1
log_level = info
log_config = default_log_config



[arakoon_2]
ip = 127.0.0.1
client_port = 4002
messaging_port = 4012
home = /tmp/arakoon/arakoon_2
log_level = info
log_config = default_log_config



#[learner_0]
#ip = 127.0.0.1
#client_port = 4003
#messaging_port = 4013
#home = /tmp/arakoon/learner_0
#log_dir = /tmp/arakoon/learner_0
#learner = true
#targets = arakoon_0
#log_level = debug
#log_config = default_log_config

[witness_0]
ip = 127.0.0.1
client_port = 4004
messaging_port = 4014
home = /tmp/arakoon/witness_0
log_dir = /tmp/arakoon/witness_0
witness = true
log_level = debug
log_config = default_log_config
